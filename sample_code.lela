let fifteen = 15;

//something hello

struct Pair [left, right];
//{}

let string_test = "hello!";
string_test;

let p = make_pair(10000000,5);

pair.left(p);

func add(a, b) {
    (a + b)
};

pair?(p);

func factorial(n) {
    switch {
        case (n is 0): 1, 
        case else: (n * factorial((n - 1))),
    }
};

factorial(5);

func exp(n, x) {
    switch {
        case (x is 0): (1), 
        case else: (n * exp(n, (x - 1)))
    }
};

exp(2, 1);

func square(a) {
    (a * a)
};
square(5);

func exp_with_square(n, x) {
    switch {
        case (x is 1):
            (n),
        case (x is 0):
            (1),
        case else:
            (square(n) * exp_with_square(n, (x - 2)))
    }
};

exp_with_square(5, 3);


struct cons [first, rest];

func map(list, f) {
    switch {
        case (list is #[]): #[],
        case else: make_cons(f(first(list)), map(rest(list), f))
    }
};

func foldr(list, f, base_case) {
     switch {
        case (list is #[]): base_case,
        case else: f(first(list), foldr(rest(list), f, base_case))
     }
};


map(#[1,2,3,4,5,6,7,8,9,10], square);
