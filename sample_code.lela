let fifteen = 15;

struct Pair [left, right];

make_Pair(15,5);

func add(a, b) {
    (a + b)
};

func factorial(n) {
    switch {
        case (n is 0): 1,
        case #true: (n * factorial((n - 1))),
    }
};

factorial(5);

func exp(n, x) {
    switch {
        case (x is 0): (1),
        case #true: (n * exp(n, (x - 1))),
    }
};

exp(2, 1);

func square(a) {
    (a * a)
};
square(5);

func exp_with_square(n, x) {
    switch {
        case (x is 1):
            (n),
        case (x is 0):
            (1),
        case #true:
            (square(n) * exp_with_square(n, (x - 2))),
    }
};

(exp_with_square(5, 3));

func not(a) {
    if (a) {
        #false
    } else {
        #true
    }
};

not(#false);

func implies(a, b) {
    (b or not(a))
};

implies(#true, #false);


rest([1]);

(10 + 12);
(10 + -5);

add(10, 12);

let the_other_one = 10;

switch {
    case (fifteen is 15): 150000,
    case #true: -100,
}